// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
}

model User {
  userId              String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username            String                @unique
  nickname            String?               @unique
  email               String                @unique
  password            String
  provider            String                @default("local")
  picture             String                @default("default/picture")
  country_code        String?
  Country             CountryMaster?        @relation(fields: [country_code], references: [code])
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  Comic               Comic[]
  Rating              Rating[]
  ShareDownloadMaster ShareDownloadMaster[]
  ChapterLikes        Likes[]
  Comments            Comments[]
  Subscriber          Subscriber[]
  RolesOnUsers        RolesOnUsers[]
  Chapters            Chapters[]
}

model Comic {
  comicId                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                       String                @db.Uuid
  User                          User                  @relation(fields: [user_id], references: [userId])
  username                      String
  comic_name                    String                @unique
  summary                       String
  primary_genre                 Int
  secondary_genre               Int
  PrimaryGenre                  GenreMaster           @relation("primary_genre", fields: [primary_genre], references: [genreId])
  SecondaryGenre                GenreMaster           @relation("secondary_genre", fields: [secondary_genre], references: [genreId])
  square_thumbnail              String
  horizontal_thumbnail          String
  square_thumbnail_metadata     Json
  horizontal_thumbnail_metadata Json
  status_id                     Int
  Status                        StatusMaster          @relation(fields: [status_id], references: [id])
  totalRating                   Float                 @default(0)
  totalSubs                     Int                   @default(0)
  slug                          String
  shareCount                    Int                   @default(0)
  downloadCount                 Int                   @default(0)
  // weeklyUpload         Boolean
  uploadDay                     String?
  policiesApproved              Boolean
  created_at                    DateTime              @default(now())
  updated_at                    DateTime              @updatedAt
  deleted                       Boolean               @default(false)
  lastChapter                   Json
  lastChapterUpdatedAt          DateTime
  weekday                       String
  Rating                        Rating[]
  ShareDownloadMaster           ShareDownloadMaster[]
  Chapters                      Chapters[]
  Subscriber                    Subscriber[]
}

model GenreMaster {
  genreId               Int     @id @default(autoincrement())
  genreName             String  @unique
  ComicToPrimaryGenre   Comic[] @relation("primary_genre")
  ComicToSecondaryGenre Comic[] @relation("secondary_genre")
}

model Chapters {
  chapterId           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chapter_number      Int
  user_id             String     @db.Uuid
  User                User       @relation(fields: [user_id], references: [userId])
  comic_id            String     @db.Uuid
  Comic               Comic      @relation(fields: [comic_id], references: [comicId])
  chapter_name        String
  thumbnail           String
  thumbnail_metadata  Json
  creator_note        String?
  like_count          Int        @default(0)
  verticalReadingMode Boolean
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  deleted             Boolean    @default(false)
  Comments            Comments[]
  Panels              Panels[]
}

model Panels {
  panelId        Int      @id @default(autoincrement())
  panelUrl       String
  panel_metadata Json
  chapater_id    String   @db.Uuid
  Chapter        Chapters @relation(fields: [chapater_id], references: [chapterId])
}

model Likes {
  object_id   String
  user_id     String @db.Uuid
  User        User   @relation(fields: [user_id], references: [userId])
  object_type String

  @@id([object_id, user_id])
}

model Comments {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chapter_id String   @db.Uuid
  Chapter    Chapters @relation(fields: [chapter_id], references: [chapterId])
  user_id    String   @db.Uuid
  User       User     @relation(fields: [user_id], references: [userId])
  username   String
  message    String
  like_count Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([chapter_id, user_id])
}

model Subscriber {
  id        Int      @id @default(autoincrement())
  comic_id  String   @db.Uuid
  Comic     Comic    @relation(fields: [comic_id], references: [comicId])
  user_id   String   @db.Uuid
  User      User     @relation(fields: [user_id], references: [userId])
  timeStamp DateTime @default(now())

  @@unique([user_id, comic_id])
}

model Rating {
  id       Int    @id @default(autoincrement())
  comic_id String @db.Uuid
  Comic    Comic  @relation(fields: [comic_id], references: [comicId])
  user_id  String @db.Uuid
  User     User   @relation(fields: [user_id], references: [userId])
  rate     Float

  @@unique([user_id, comic_id])
}

model ShareDownloadMaster {
  id       Int    @id @default(autoincrement())
  comic_id String @db.Uuid
  Comic    Comic  @relation(fields: [comic_id], references: [comicId])
  user_id  String @db.Uuid
  User     User   @relation(fields: [user_id], references: [userId])
  type     String
}

model StatusMaster {
  id    Int     @id @default(autoincrement())
  name  String
  Comic Comic[]
}

model RoleMaster {
  id           Int            @id @default(autoincrement())
  name         String
  RolesOnUsers RolesOnUsers[]
}

model RolesOnUsers {
  user_id    String     @db.Uuid
  user       User       @relation(fields: [user_id], references: [userId])
  role_id    Int
  role       RoleMaster @relation(fields: [role_id], references: [id])
  assignedAt DateTime   @default(now())

  @@id([role_id, user_id])
}

model CountryMaster {
  name      String
  phoneCode String @unique
  code      String @id @unique
  User      User[]
}
